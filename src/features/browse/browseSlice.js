import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { fetchHouses } from "./browseAPI";

const initialState = [];

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getHousesAsync = createAsyncThunk(
  "browse/fetchHouses",
  async (address) => {
    const response = await fetchHouses(address);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const browseSlice = createSlice({
  name: "browse",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    getHouses: (state, action) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.houses = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getHousesAsync.pending, (state) => {})
      .addCase(getHousesAsync.fulfilled, (state, action) => {
        state.houses = action.payload;
      });
  },
});

export const { getHouses } = browseSlice.actions;

export const selectHouses = (state) => state.houses;

export default browseSlice.reducer;
